import mongoose from "mongoose";
import request from "supertest";
import { app } from "../../app";
import { Order, OrderStatus } from "../../models/order";
import { Ticket, TicketDoc } from "../../models/ticket";

const PATH = "/api/orders";
const insertTicket = async () => {
  const id = new mongoose.Types.ObjectId().toHexString();
  const ticket = Ticket.build({
    id,
    price: 1,
    title: "ticket title",
  });
  await ticket.save();
  return ticket;
};

const insertOrder = async (ticket: TicketDoc, userId?: string) => {
  const expiresAt = new Date();
  expiresAt.setSeconds(expiresAt.getSeconds() + 15 * 60);
  const order = Order.build({
    ticket,
    userId: userId || "randomUserId",
    expiresAt,
    status: OrderStatus.Created,
  });
  await order.save();
  return order;
};

it("return order by id", async () => {
  const userId = "userid";
  const ticket = await insertTicket();
  const order = await insertOrder(ticket, userId);

  const responseOrder = await request(app)
    .get(`${PATH}/${order.id}`)
    .set("Cookie", global.generateAuthCookie(userId))
    .send({})
    .expect(200);
  expect(responseOrder.body.id).toEqual(order.id);
  expect(responseOrder.body.ticket.id).toEqual(ticket.id);
});

it("return 401 if the order is not belong to the requester", async () => {
  const ticket = await insertTicket();
  // create order by random user id
  const order = await insertOrder(ticket);

  const responseOrder = await request(app)
    .get(`${PATH}/${order.id}`)
    // use another random user id generated by generateAuthCookie
    .set("Cookie", global.generateAuthCookie())
    .send({})
    .expect(401);
});
